@{
    ViewData["Title"] = "scene";
}

<link rel="stylesheet" href="~/Scripts/Paint/bootstrap-colorpalette.css">
<style type="text/css">
       #canvas{
            border: 1px solid #333;
            display: block;
            margin:20px auto;
           
         }
         
</style>

<div class="row">
 <div class="col-md-8">   
   <div class="box">
       <div class="box-header">
          <h3 class="box-title">画板</h3>
       </div>
       <div class="box-body">
          <div class="col-xs-12" >
             <canvas id="canvas" width="600px" height="400px"></canvas>
           </div>
       </div>
       <div class="box-footer">
          <div class="row">
              <div class="col-md-4">
                  <div class="btn-group">
                      <input id="selected-color1">
                       <a class="btn btn-mini dropdown-toggle" data-toggle="dropdown">color</a>
                       <ul class="dropdown-menu">
                       <li><div id="colorpalette1"></div></li>
                      </ul>
                   </div>
               </div>
               <div class="col-md-4">
                  <div class="form-group">
                      <label>lineWidth</label>
                      <select id="lineWidth">
                        <option value="1">1</option>
                        <option value="3">3</option>
                        <option value="5">5</option>
                        <option value="7">7</option>
                      </select>
                   </div>
               </div>
               <div class="col-md-4">
                    <a onclick="ClearArea()">橡皮擦</a>
               </div>
           </div>
       </div>
   </div>
 </div>
 <div class="col-md-4">
     
         <div class="small-box bg-aqua">
             <div class="inner">
                 <h3>你猜我画</h3>
             </div>
         </div>
    
     <div class="box">
         <div class="box-header">
             <h4>tips</h4>
         </div>
         <div class="box-body">
             <textarea class="form-control" rows="3" readonly="readonly" id="textshowDraw"></textarea>
         </div>
     </div>
     <div class="box">
          <div class="box-header">
               <h4>please enter your answer</h4>
               
          </div>
          <div class="box-footer">
               <input class="text">
               <a class="btn btn-mini dropdown-toggle" id="sendAnswerButtonDraw">send</a>
          </div>
     </div>
   </div>
</div>
@section scripts{
    <script src="~/Scripts/Paint/bootstrap-colorpalette.js"></script>
    <script type="text/javascript">
    $("#colorpalette1").colorPalette().on("selectColor",function(e){
        $("#selected-color1").val(e.color);
    });

    var canvas=document.getElementById("canvas");
    var ctx=canvas.getContext("2d");

    var size = document.getElementById("lineWidth");
    var color = document.getElementById("selected-color1");

    var mousePressed=false;
    var lastX,lastY;
    var receiveX,receiveY;
    var receiveMousePressed;
    var receiveColor,receiveSize,receiveClearAll;


    var scheme = document.location.protocol == "https:" ? "wss" : "ws";
    var port = document.location.port ? (":" + document.location.port) : "";
    var connectionUrl = scheme + "://" + document.location.hostname + port;
    var socket = new WebSocket(connectionUrl);

    socket.onopen=function(evt){
        console.log(socket.readyState);

    }

    
    socket.onmessage=function(evt){
        var data= evt.data;
        var receiveData=JSON.parse(data);
        $("#textshowDraw").val(receiveData.sendMessage.sendMousePressed+";"+receiveData.sendMessage.sendX+":"+receiveData.sendMessage.sendButtonMessage);
        receiveX=receiveData.sendMessage.sendX;
        receiveY=receiveData.sendMessage.sendY;
        receiveMousePressed=receiveData.sendMessage.sendMousePressed;
        receiveColor=receiveData.sendMessage.sendColor;
        receiveSize=receiveData.sendMessage.sendSize;
        receiveClearAll=receiveData.sendMessage.sendClearMessage;
        console.log(receiveX+":"+receiveY+":"+receiveMousePressed);
        Draw(receiveX, receiveY, receiveMousePressed);
        if(receiveClearAll){
        ctx.setTransform(1, 0, 0, 1, 0, 0);
        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)
        }
        receiveClearAll=false;
        

    }

    //Draw(receiveX, receiveY, receiveMousePressed);

    socket.onclose=function(evt){

    }

    $("#canvas").mousedown(function(e){
        mousePressed=receiveMousePressed;
        Draw(receiveX, receiveY, receiveMousePressed);
    })

    $("#canvas").mousemove(function(e){
        if(receiveMousePressed){
            Draw(receiveX,receiveY, receiveMousePressed);
        }
    })

    $("#canvas").mouseup(function(e){
        mousePressed=receiveMousePressed;
    })

    $("#canvas").mouseleave(function(e){
        mousePressed=receiveMousePressed;
    })

    function Draw(x,y,isDown){
        if(isDown){
            ctx.beginPath();
            ctx.lineWidth=receiveSize;
            ctx.strokeStyle=receiveColor;
            ctx.moveTo(lastX,lastY);
            ctx.lineTo(x,y);
            ctx.closePath();
            ctx.stroke();
        }
        lastX=x;
        lastY=y;
    }

    function ClearArea(){
        ctx.setTransform(1, 0, 0, 1, 0, 0);
        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
    }

    
    </script>
}